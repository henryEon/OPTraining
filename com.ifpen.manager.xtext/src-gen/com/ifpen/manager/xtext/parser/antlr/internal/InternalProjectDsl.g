/*
 * generated by Xtext 2.9.2
 */
grammar InternalProjectDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package com.ifpen.manager.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.ifpen.manager.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.ifpen.manager.xtext.services.ProjectDslGrammarAccess;

}

@parser::members {

 	private ProjectDslGrammarAccess grammarAccess;

    public InternalProjectDslParser(TokenStream input, ProjectDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Company";
   	}

   	@Override
   	protected ProjectDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleCompany
entryRuleCompany returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCompanyRule()); }
	iv_ruleCompany=ruleCompany
	{ $current=$iv_ruleCompany.current; }
	EOF;

// Rule Company
ruleCompany returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Company'
		{
			newLeafNode(otherlv_0, grammarAccess.getCompanyAccess().getCompanyKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getCompanyAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCompanyRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCompanyAccess().getEmployeesEmployeesParserRuleCall_2_0());
				}
				lv_employees_2_0=ruleEmployees
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompanyRule());
					}
					set(
						$current,
						"employees",
						lv_employees_2_0,
						"com.ifpen.manager.xtext.ProjectDsl.Employees");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCompanyAccess().getProjectProjectParserRuleCall_3_0());
				}
				lv_project_3_0=ruleProject
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompanyRule());
					}
					set(
						$current,
						"project",
						lv_project_3_0,
						"com.ifpen.manager.xtext.ProjectDsl.Project");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleEmployees
entryRuleEmployees returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEmployeesRule()); }
	iv_ruleEmployees=ruleEmployees
	{ $current=$iv_ruleEmployees.current; }
	EOF;

// Rule Employees
ruleEmployees returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='employees'
		{
			newLeafNode(otherlv_0, grammarAccess.getEmployeesAccess().getEmployeesKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getEmployeesAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEmployeesAccess().getEmployeesEmployeeParserRuleCall_2_0());
				}
				lv_employees_2_0=ruleEmployee
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEmployeesRule());
					}
					add(
						$current,
						"employees",
						lv_employees_2_0,
						"com.ifpen.manager.xtext.ProjectDsl.Employee");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getEmployeesAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleEmployee
entryRuleEmployee returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEmployeeRule()); }
	iv_ruleEmployee=ruleEmployee
	{ $current=$iv_ruleEmployee.current; }
	EOF;

// Rule Employee
ruleEmployee returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Employee'
		{
			newLeafNode(otherlv_0, grammarAccess.getEmployeeAccess().getEmployeeKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getEmployeeAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEmployeeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2='weight'
			{
				newLeafNode(otherlv_2, grammarAccess.getEmployeeAccess().getWeightKeyword_2_0());
			}
			(
				(
					lv_weight_3_0=RULE_INT
					{
						newLeafNode(lv_weight_3_0, grammarAccess.getEmployeeAccess().getWeightINTTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEmployeeRule());
						}
						setWithLastConsumed(
							$current,
							"weight",
							lv_weight_3_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)?
		(
			otherlv_4='height'
			{
				newLeafNode(otherlv_4, grammarAccess.getEmployeeAccess().getHeightKeyword_3_0());
			}
			(
				(
					lv_height_5_0=RULE_INT
					{
						newLeafNode(lv_height_5_0, grammarAccess.getEmployeeAccess().getHeightINTTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEmployeeRule());
						}
						setWithLastConsumed(
							$current,
							"height",
							lv_height_5_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleProject
entryRuleProject returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProjectRule()); }
	iv_ruleProject=ruleProject
	{ $current=$iv_ruleProject.current; }
	EOF;

// Rule Project
ruleProject returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Project'
		{
			newLeafNode(otherlv_0, grammarAccess.getProjectAccess().getProjectKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getProjectAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProjectRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='type'
		{
			newLeafNode(otherlv_2, grammarAccess.getProjectAccess().getTypeKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProjectAccess().getTypeTaskTypeEnumRuleCall_3_0());
				}
				lv_type_3_0=ruletaskType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProjectRule());
					}
					set(
						$current,
						"type",
						lv_type_3_0,
						"com.ifpen.manager.xtext.ProjectDsl.taskType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getProjectAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProjectAccess().getTasksTaskParserRuleCall_5_0());
				}
				lv_tasks_5_0=ruleTask
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProjectRule());
					}
					add(
						$current,
						"tasks",
						lv_tasks_5_0,
						"com.ifpen.manager.xtext.ProjectDsl.Task");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getProjectAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleTask
entryRuleTask returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTaskRule()); }
	iv_ruleTask=ruleTask
	{ $current=$iv_ruleTask.current; }
	EOF;

// Rule Task
ruleTask returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Task'
		{
			newLeafNode(otherlv_0, grammarAccess.getTaskAccess().getTaskKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getTaskAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTaskRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTaskAccess().getTypeTaskTypeEnumRuleCall_2_0());
				}
				lv_type_2_0=ruletaskType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTaskRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"com.ifpen.manager.xtext.ProjectDsl.taskType");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Rule taskType
ruletaskType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='development'
			{
				$current = grammarAccess.getTaskTypeAccess().getDevelopmentEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getTaskTypeAccess().getDevelopmentEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='documentation'
			{
				$current = grammarAccess.getTaskTypeAccess().getDocumentationEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getTaskTypeAccess().getDocumentationEnumLiteralDeclaration_1());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
