/*
 * generated by Xtext 2.9.2
 */
package com.ifpen.manager.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ProjectDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class CompanyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ifpen.manager.xtext.ProjectDsl.Company");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCompanyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cEmployeesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEmployeesEmployeesParserRuleCall_2_0 = (RuleCall)cEmployeesAssignment_2.eContents().get(0);
		private final Assignment cProjectAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cProjectProjectParserRuleCall_3_0 = (RuleCall)cProjectAssignment_3.eContents().get(0);
		
		//Company:
		//	'Company'
		//	name=ID
		//	employees=Employees project=Project;
		@Override public ParserRule getRule() { return rule; }
		
		//'Company' name=ID employees=Employees project=Project
		public Group getGroup() { return cGroup; }
		
		//'Company'
		public Keyword getCompanyKeyword_0() { return cCompanyKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//employees=Employees
		public Assignment getEmployeesAssignment_2() { return cEmployeesAssignment_2; }
		
		//Employees
		public RuleCall getEmployeesEmployeesParserRuleCall_2_0() { return cEmployeesEmployeesParserRuleCall_2_0; }
		
		//project=Project
		public Assignment getProjectAssignment_3() { return cProjectAssignment_3; }
		
		//Project
		public RuleCall getProjectProjectParserRuleCall_3_0() { return cProjectProjectParserRuleCall_3_0; }
	}
	public class EmployeesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ifpen.manager.xtext.ProjectDsl.Employees");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEmployeesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEmployeesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEmployeesEmployeeParserRuleCall_2_0 = (RuleCall)cEmployeesAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Employees:
		//	'employees'
		//	'{'
		//	employees+=Employee+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'employees' '{' employees+=Employee+ '}'
		public Group getGroup() { return cGroup; }
		
		//'employees'
		public Keyword getEmployeesKeyword_0() { return cEmployeesKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//employees+=Employee+
		public Assignment getEmployeesAssignment_2() { return cEmployeesAssignment_2; }
		
		//Employee
		public RuleCall getEmployeesEmployeeParserRuleCall_2_0() { return cEmployeesEmployeeParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class EmployeeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ifpen.manager.xtext.ProjectDsl.Employee");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEmployeeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWeightKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cWeightAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cWeightINTTerminalRuleCall_2_1_0 = (RuleCall)cWeightAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cHeightKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cHeightAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cHeightINTTerminalRuleCall_3_1_0 = (RuleCall)cHeightAssignment_3_1.eContents().get(0);
		
		//Employee:
		//	'Employee' name=ID ('weight' weight=INT)? ('height' height=INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Employee' name=ID ('weight' weight=INT)? ('height' height=INT)?
		public Group getGroup() { return cGroup; }
		
		//'Employee'
		public Keyword getEmployeeKeyword_0() { return cEmployeeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('weight' weight=INT)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'weight'
		public Keyword getWeightKeyword_2_0() { return cWeightKeyword_2_0; }
		
		//weight=INT
		public Assignment getWeightAssignment_2_1() { return cWeightAssignment_2_1; }
		
		//INT
		public RuleCall getWeightINTTerminalRuleCall_2_1_0() { return cWeightINTTerminalRuleCall_2_1_0; }
		
		//('height' height=INT)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'height'
		public Keyword getHeightKeyword_3_0() { return cHeightKeyword_3_0; }
		
		//height=INT
		public Assignment getHeightAssignment_3_1() { return cHeightAssignment_3_1; }
		
		//INT
		public RuleCall getHeightINTTerminalRuleCall_3_1_0() { return cHeightINTTerminalRuleCall_3_1_0; }
	}
	public class ProjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ifpen.manager.xtext.ProjectDsl.Project");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProjectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cTypeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTaskTypeEnumRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTasksAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTasksTaskParserRuleCall_5_0 = (RuleCall)cTasksAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Project:
		//	'Project'
		//	name=ID
		//	'type' type=taskType
		//	'{'
		//	tasks+=Task+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Project' name=ID 'type' type=taskType '{' tasks+=Task+ '}'
		public Group getGroup() { return cGroup; }
		
		//'Project'
		public Keyword getProjectKeyword_0() { return cProjectKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'type'
		public Keyword getTypeKeyword_2() { return cTypeKeyword_2; }
		
		//type=taskType
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//taskType
		public RuleCall getTypeTaskTypeEnumRuleCall_3_0() { return cTypeTaskTypeEnumRuleCall_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//tasks+=Task+
		public Assignment getTasksAssignment_5() { return cTasksAssignment_5; }
		
		//Task
		public RuleCall getTasksTaskParserRuleCall_5_0() { return cTasksTaskParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class TaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.ifpen.manager.xtext.ProjectDsl.Task");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTaskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTaskTypeEnumRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//Task:
		//	'Task' name=ID type=taskType;
		@Override public ParserRule getRule() { return rule; }
		
		//'Task' name=ID type=taskType
		public Group getGroup() { return cGroup; }
		
		//'Task'
		public Keyword getTaskKeyword_0() { return cTaskKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//type=taskType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//taskType
		public RuleCall getTypeTaskTypeEnumRuleCall_2_0() { return cTypeTaskTypeEnumRuleCall_2_0; }
	}
	
	public class TaskTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.ifpen.manager.xtext.ProjectDsl.taskType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cDevelopmentEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cDevelopmentDevelopmentKeyword_0_0 = (Keyword)cDevelopmentEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDocumentationEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDocumentationDocumentationKeyword_1_0 = (Keyword)cDocumentationEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum taskType:
		//	development | documentation;
		public EnumRule getRule() { return rule; }
		
		//development | documentation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//development
		public EnumLiteralDeclaration getDevelopmentEnumLiteralDeclaration_0() { return cDevelopmentEnumLiteralDeclaration_0; }
		
		//'development'
		public Keyword getDevelopmentDevelopmentKeyword_0_0() { return cDevelopmentDevelopmentKeyword_0_0; }
		
		//documentation
		public EnumLiteralDeclaration getDocumentationEnumLiteralDeclaration_1() { return cDocumentationEnumLiteralDeclaration_1; }
		
		//'documentation'
		public Keyword getDocumentationDocumentationKeyword_1_0() { return cDocumentationDocumentationKeyword_1_0; }
	}
	
	private final CompanyElements pCompany;
	private final EmployeesElements pEmployees;
	private final EmployeeElements pEmployee;
	private final TaskTypeElements eTaskType;
	private final ProjectElements pProject;
	private final TaskElements pTask;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ProjectDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pCompany = new CompanyElements();
		this.pEmployees = new EmployeesElements();
		this.pEmployee = new EmployeeElements();
		this.eTaskType = new TaskTypeElements();
		this.pProject = new ProjectElements();
		this.pTask = new TaskElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.ifpen.manager.xtext.ProjectDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Company:
	//	'Company'
	//	name=ID
	//	employees=Employees project=Project;
	public CompanyElements getCompanyAccess() {
		return pCompany;
	}
	
	public ParserRule getCompanyRule() {
		return getCompanyAccess().getRule();
	}
	
	//Employees:
	//	'employees'
	//	'{'
	//	employees+=Employee+
	//	'}';
	public EmployeesElements getEmployeesAccess() {
		return pEmployees;
	}
	
	public ParserRule getEmployeesRule() {
		return getEmployeesAccess().getRule();
	}
	
	//Employee:
	//	'Employee' name=ID ('weight' weight=INT)? ('height' height=INT)?;
	public EmployeeElements getEmployeeAccess() {
		return pEmployee;
	}
	
	public ParserRule getEmployeeRule() {
		return getEmployeeAccess().getRule();
	}
	
	//enum taskType:
	//	development | documentation;
	public TaskTypeElements getTaskTypeAccess() {
		return eTaskType;
	}
	
	public EnumRule getTaskTypeRule() {
		return getTaskTypeAccess().getRule();
	}
	
	//Project:
	//	'Project'
	//	name=ID
	//	'type' type=taskType
	//	'{'
	//	tasks+=Task+
	//	'}';
	public ProjectElements getProjectAccess() {
		return pProject;
	}
	
	public ParserRule getProjectRule() {
		return getProjectAccess().getRule();
	}
	
	//Task:
	//	'Task' name=ID type=taskType;
	public TaskElements getTaskAccess() {
		return pTask;
	}
	
	public ParserRule getTaskRule() {
		return getTaskAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
